üëâ [[https://github.com/sponsors/xenodium][Support this work via GitHub Sponsors]]

* Ready Player Mode

A lightweight major mode to open media (audio/video) files in an Emacs buffer.

#+HTML: <img src="https://raw.githubusercontent.com/xenodium/ready-player/main/screenshots/audio-player.png" width="50%" />

#+HTML: <img src="https://raw.githubusercontent.com/xenodium/ready-player/main/screenshots/video-player.png" width="70%" />

* Install

This package isn't on MELPA just yet. In the meantime, clone the repo or use the handy =package-vc-install= (as of Emacs 29):

#+begin_src emacs-lisp :lexical no
  (package-vc-install "https://github.com/xenodium/ready-player" :last-release)
#+end_src

* Setup

#+begin_src emacs-lisp :lexical no
  (require 'ready-player)
  (ready-player-mode)
#+end_src

To customize supported media files, set =ready-player-supported-media= before toggling =ready-player-mode=.

* Toggle recognition

You can optionally toggle media recognition on and off interactively via =M-x ready-player-mode=.

* use-package

You can combine the previous install/setup into something like the following:

#+begin_src emacs-lisp :lexical no
  (use-package ready-player
    :init
    (unless (package-installed-p (intern "ready-player"))
      (package-vc-install "https://github.com/xenodium/ready-player" :last-release))
    :config
    (ready-player-mode))
#+end_src

* External dependencies

** Playback

=ready-player-mode= relies on command line utilities to play media.

By default, =ready-player-mode= will try to use either =mpv=, =vlc=, =ffplay=, or =mplayer= (in that order). Customize =ready-player-open-playback-commands= to your preference.

Install either of these using your favorite method.

On macOS:

#+begin_src sh
  brew install mpv
#+end_src

** Metadata

Metadata is extracted using =ffprobe=, which comes bundled with [[https://www.youtube.com/watch?v=9kaIXkImCAM][ffmpeg]].

Install using your favorite method.

On macOS:

#+begin_src sh
  brew install ffmpeg
#+end_src

** Thumbnails

=ready-player-mode= prefers [[https://github.com/dirkvdb/ffmpegthumbnailer][ffmpegthumbnailer]] to generate thumbnails, but will fallback to =ffmpeg= otherwise.

Install using your favorite method.

On macOS:

#+begin_src sh
  brew install ffmpegthumbnailer
#+end_src

* Customizations

#+BEGIN_SRC emacs-lisp :results table :colnames '("Custom variable" "Description") :exports results
  (let ((rows))
    (mapatoms
     (lambda (symbol)
       (when (and (string-match "^ready-player"
                                (symbol-name symbol))
                  (not (string-match "--" (symbol-name symbol)))
                  (or (custom-variable-p symbol)
                      (boundp symbol)))
         (push `(,symbol
                 ,(car
                   (split-string
                    (or (get (indirect-variable symbol)
                             'variable-documentation)
                        (get symbol 'variable-documentation)
                        "")
                    "\n")))
               rows))))
    rows)
#+END_SRC

#+RESULTS:
| Custom variable                      | Description                                                  |
|--------------------------------------+--------------------------------------------------------------|
| ready-player-supported-media         | Supported media types.                                       |
| ready-player-play-icon               | Play button icon string, for example: "‚èµ".                   |
| ready-player-previous-icon           | Previous button icon string, for example: "<<".              |
| ready-player-cache-thumbnails        | When non-nil, cache thumbnail.                               |
| ready-player-major-mode-hook         | Hook run after entering Ready Player mode.                   |
| ready-player-mode                    | Non-nil if Ready-Player mode is enabled.                     |
| ready-player-stop-icon               | Stop icon string, for example: "‚ñ†".                          |
| ready-player-repeat                  | Continue playing if there's more media in current directory. |
| ready-player-open-externally-icon    | Open externally button icon string, for example: "‚û¶".        |
| ready-player-show-thumbnail          | When non-nil, display file's thumbnail if available.         |
| ready-player-next-icon               | Next button icon string, for example: ">>".                  |
| ready-player-major-mode-map          | Keymap for `ready-player'.                                   |
| ready-player-open-playback-commands  | Command line utilities to try for playback.                  |
| ready-player-major-mode-syntax-table | Syntax table for `ready-player-major-mode'.                  |
| ready-player-repeat-icon             | Repeat icon string, for example: "‚áÜ".                        |

** Buttons (macOS SF Symbols)

By default, =ready-player-mode= will try to use macOS [[https://developer.apple.com/sf-symbols/][SF Symbols]] (if available) for =ready-player-play-icon= =ready-player-stop-icon= and =ready-player-open-externally-icon=.

You'll need to [[https://lmno.lol/alvaro/emacs-insert-and-render-sf-symbols][enable SF symbol rendering in Emacs]] /(before loading =ready-player.el=)/.

#+begin_src emacs-lisp :lexical no
  (when (memq system-type '(darwin))
    (set-fontset-font t nil "SF Pro Display" nil 'append))
#+end_src

** Buttons (Linux)

If macOS SF Symbols aren't available, =<< ‚èµ ‚ñ† >> ‚û¶ ‚áÜ= are used as a fallback. These can be customized (see all icon variables), though may not be the best alternative. Happy to take suggestions!

* Commands

#+BEGIN_SRC emacs-lisp :results table :colnames '("Command" "Description") :exports results
    (let ((rows))
      (mapatoms
       (lambda (symbol)
         (when (and (string-match "^ready-player"
                                  (symbol-name symbol))
                    (commandp symbol))
           (push `(,(string-join
                     (seq-filter
                      (lambda (symbol)
                        (not (string-match "menu" symbol)))
                      (mapcar
                       (lambda (keys)
                         (key-description keys))
                       (or
                        (where-is-internal
                         (symbol-function symbol)
                         comint-mode-map
                         nil nil (command-remapping 'comint-next-input))
                        (where-is-internal
                         symbol ready-player-major-mode-map nil nil (command-remapping symbol))
                        (where-is-internal
                         (symbol-function symbol)
                         ready-player-major-mode-map nil nil (command-remapping symbol)))))  " or ")
                   ,(symbol-name symbol)
                   ,(car
                     (split-string
                      (or (documentation symbol t) "")
                      "\n")))
                 rows))))
      rows)
#+END_SRC

#+RESULTS:
|           | ready-player-add-to-auto-mode-alist      | Add media recognized by `ready-player-mode'.           |
| p         | ready-player-open-previous-file          | Open the previous media file in the same directory.    |
|           | ready-player-stop                        | Stop media playback.                                   |
| SPC       | ready-player-toggle-play-stop            | Toggle play/stop of media.                             |
|           | ready-player-play                        | Start media playback.                                  |
|           | ready-player-remove-from-auto-mode-alist | Remove media recognized by `ready-player-mode'.        |
| o or e    | ready-player-open-externally             | Open visited file in default external program.         |
|           | ready-player-mode                        | Toggle Ready Player mode media file recognition.       |
| n         | ready-player-open-next-file              | Open the next media file in the same directory.        |
| q         | ready-player-quit                        | Quit `ready-player-major-mode' window and kill buffer. |
| g         | ready-player-toggle-reload-buffer        | Reload media from file.                                |
|           | ready-player-major-mode                  | Major mode to preview and play media files.            |
|           | ready-player-toggle-repeat               | Toggle repeat setting.                                 |
| TAB       | ready-player-next-button                 | Navigate to next button.                               |
| <backtab> | ready-player-previous-button             | Navigate to previous button.                           |
|           | ready-player--open-file-at-offset        | Open the next media file in the same directory.        |

üëâ [[https://github.com/sponsors/xenodium][Support this work via GitHub Sponsors]]
